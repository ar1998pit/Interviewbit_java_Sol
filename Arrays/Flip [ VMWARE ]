You are given a binary string(i.e. with characters 0 and 1) S consisting of characters S1, S2, …, SN. In a single operation, you can choose two indices L and R such that 1 ≤ L ≤ R ≤ N and flip the characters SL, SL+1, …, SR. By flipping, we mean change character 0 to 1 and vice-versa.

Your aim is to perform ATMOST one operation such that in final string number of 1s is maximised. If you don’t want to perform the operation, return an empty array. Else, return an array consisting of two elements denoting L and R. If there are multiple solutions, return the lexicographically smallest pair of L and R.

Notes:

Pair (a, b) is lexicographically smaller than pair (c, d) if a < c or, if a == c and b < d.
For example,

S = 010

Pair of [L, R] | Final string
_______________|_____________
[1 1]          | 110
[1 2]          | 100
[1 3]          | 101
[2 2]          | 000
[2 3]          | 001

We see that two pairs [1, 1] and [1, 3] give same number of 1s in final string. So, we return [1, 1].

public class Solution {
    public ArrayList<Integer> flip(String A) {
        ArrayList<Integer> ans = new ArrayList<Integer>();
        int n = A.length();
        int arr[] = new int[n];
        for(int i=0;i<n;i++){
            if(A.charAt(i)=='0') arr[i] = 1;
            else arr[i] = -1;
        }
        int temp_start = 0, temp_end = 0, start = -1, end = -1, move_start = 0;
        for(int i = 0;i<n;i++){
            if(temp_end+arr[i]<0){
                move_start = i+1;
                temp_end = 0;
            }else temp_end += arr[i];
            if(temp_end > temp_start){
                temp_start = temp_end;
                start = move_start;
                end = i;
            }
        }
        if(start == -1) return ans;
        ans.add(start+1);
        ans.add(end+1);
        return ans;
    }public class Solution {
    public ArrayList<Integer> flip(String s) {
        /*
            l to r is the current interval;
            ml to mr is the answer interval;
            n1 and n0 are the number of zeros and ones after fliping in current interval;
            diff is the difference of no. of zeros to one in our answer interval;
            flag is to check if all indices are '1' only;
            
        */
        int n1=0,n0=0,l=0,r=0,ml=0,mr=0,diff=0,i=0;
        boolean flag=true;
        while(i<s.length()){
            char c=s.charAt(i);
            // update r & iif n1>=n0;
            if(n1>=n0){
                if(c=='1'){
                    n0++;
                }
                if(c=='0'){
                    n1++;
                    flag=false;
                }
                r++;
                i++;
            }
            // if n0>n1 means our current interval is not correct.
            else{
                l=r=i;
                n1=n0=0;
            }
            /* 
                to include the current interval in our 
                answer if current difference of 0's and 1's 
                is more than diff equal to is avoided to 
                get lexigraphically the smallest answer;
            */
            if(diff<(n1-n0)){
                ml=l;
                mr=r;
                // System.out.println(ml+" "+mr);
                diff=n1-n0;
            }
        }
        ArrayList<Integer> arr=new ArrayList<Integer>();
        if(flag)
            return arr;
        arr.add(ml+1);
        arr.add(mr);
        return arr;
    }
}


}




2nd approach - 
public class Solution {
    public ArrayList<Integer> flip(String s) {
        /*
            l to r is the current interval;
            ml to mr is the answer interval;
            n1 and n0 are the number of zeros and ones after fliping in current interval;
            diff is the difference of no. of zeros to one in our answer interval;
            flag is to check if all indices are '1' only;
            
        */
        int n1=0,n0=0,l=0,r=0,ml=0,mr=0,diff=0,i=0;
        boolean flag=true;
        while(i<s.length()){
            char c=s.charAt(i);
            // update r & iif n1>=n0;
            if(n1>=n0){
                if(c=='1'){
                    n0++;
                }
                if(c=='0'){
                    n1++;
                    flag=false;
                }
                r++;
                i++;
            }
            // if n0>n1 means our current interval is not correct.
            else{
                l=r=i;
                n1=n0=0;
            }
            /* 
                to include the current interval in our 
                answer if current difference of 0's and 1's 
                is more than diff equal to is avoided to 
                get lexigraphically the smallest answer;
            */
            if(diff<(n1-n0)){
                ml=l;
                mr=r;
                // System.out.println(ml+" "+mr);
                diff=n1-n0;
            }
        }
        ArrayList<Integer> arr=new ArrayList<Integer>();
        if(flag)
            return arr;
        arr.add(ml+1);
        arr.add(mr);
        return arr;
    }
}

